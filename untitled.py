# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QCoreApplication,Qt

import os, subprocess, signal

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setWindowIcon(QtGui.QIcon("C:\\Users\\heber\\Desktop\\testicon.png"))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(100, 450, 551, 81))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_5 = QtWidgets.QPushButton(self.widget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout.addWidget(self.pushButton_5)
        #self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        #self.pushButton_2.setObjectName("pushButton_2")
        #self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.widget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)




        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        self.P = None
        self.connect_function()
    
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "easyPDFcopy"))
        self.pushButton.setText(_translate("MainWindow", "启动"))
        self.pushButton_5.setText(_translate("MainWindow", "停止"))
        #self.pushButton_2.setText(_translate("MainWindow", "提示"))
        self.pushButton_3.setText(_translate("MainWindow", "退出"))
    
    
    def start(self):
        if self.P is None:
            self.P = subprocess.Popen(['python','core_win.py'])
            print('Started, PID=',self.P.pid,'\n\n')
        else:
            print('One process has been started, PID=',self.P.pid,'\n\n')
    
    def stop(self):
        if self.P is not None:
            tmp = self.P.pid
            os.kill(self.P.pid, signal.SIGTERM)
            self.P = None
            print('Killed PID=',tmp,'\n\n')
            
        else:
            print('No process is running.\n\n')


    
    def connect_function(self):
        self.pushButton_3.clicked.connect(QCoreApplication.quit)
        self.pushButton.clicked.connect(self.start)
        self.pushButton_5.clicked.connect(self.stop)





class easyWindow(QtWidgets.QMainWindow):
    def changeEvent(self, event):
        if event.type() == QtCore.QEvent.WindowStateChange:
            if self.windowState() & QtCore.Qt.WindowMinimized:
                event.ignore()
                self.hide()
                return

        super(easyWindow, self).changeEvent(event)





class TrayIcon(QtWidgets.QSystemTrayIcon):
    def __init__(self,MainWindow,parent=None):
        super(TrayIcon, self).__init__(parent)
        self.ui = MainWindow
        self.createMenu()
    
    
    def createMenu(self):
        self.menu = QtWidgets.QMenu()
        self.showAction1 = QtWidgets.QAction("显示", self, triggered=self.show_window)
        # self.Action2 = QtWidgets.QAction("启动")
        # self.Action3 = QtWidgets.QAction("停止")
        self.quitAction = QtWidgets.QAction("退出", self, triggered=self.quit)
 
        self.menu.addAction(self.showAction1)
        # self.menu.addAction(self.Action2)
        # self.menu.addAction(self.Action3)
        self.menu.addAction(self.quitAction)
        self.setContextMenu(self.menu)

        #self.Action2.triggered.connect(self.showMsg)
        #self.Action3.triggered.connect(self.ui.stop)


 
        self.setIcon(QtGui.QIcon("C:\\Users\\heber\\Desktop\\testicon.png"))
        self.icon = self.MessageIcon()
 
        #把鼠标点击图标的信号和槽连接
        self.activated.connect(self.onIconClicked)
 
    def showMsg(self):
        print(self.ui_model.P.pid)
 
    def show_window(self):
        #若是最小化，则先正常显示窗口，再变为活动窗口（暂时显示在最前面）
        self.ui.showNormal()
        self.ui.activateWindow()
        self.ui.setWindowFlags(QtCore.Qt.Window)
        self.ui.show()
        
    def quit(self):
        QtWidgets.qApp.quit()
 
    #鼠标点击icon传递的信号会带有一个整形的值，1是表示单击右键，2是双击，3是单击左键，4是用鼠标中键点击
    def onIconClicked(self, reason):
        #if reason == 2 or reason == 3:
        if reason == 2:
            if self.ui.isMinimized() or not self.ui.isVisible():
                #若是最小化，则先正常显示窗口，再变为活动窗口（暂时显示在最前面）
                self.ui.showNormal()
                self.ui.activateWindow()
                self.ui.setWindowFlags(Qt.Window)
                self.ui.show()
            else:
                #若不是最小化，则最小化
                self.ui.showMinimized()
                self.ui.setWindowFlags(QtCore.Qt.SplashScreen)
                self.ui.show()






if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    # MainWindow = QtWidgets.QMainWindow()
    MainWindow = easyWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    #MainWindow.show()

    ti = TrayIcon(MainWindow)
    ti.show()


    sys.exit(app.exec_())
