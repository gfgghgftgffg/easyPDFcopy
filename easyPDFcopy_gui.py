# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'easyPDFcopy.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QCoreApplication,Qt

# bundle_dir = getattr(sys, '_MEIPASS', path.abspath(os.path.dirname(__file__)))
# path_to_yml = os.path.abspath(os.path.join(bundle_dir, 'config.yml'))
# solve the icon bug, see https://stackoverflow.com/questions/51060894/adding-a-data-file-in-pyinstaller-using-the-onefile-option
import os,sys
os.chdir(sys._MEIPASS)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(849, 512)
        MainWindow.setWindowIcon(QtGui.QIcon("./easypdfcopy.png"))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 829, 440))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.scrollAreaWidgetContents)
        self.plainTextEdit.setGeometry(QtCore.QRect(0, 0, 831, 441))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_2.addWidget(self.scrollArea)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout.addWidget(self.pushButton_5)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        self.fmt = QtGui.QTextCharFormat()
        self.split_str = '-----------------' * 7 + '------------'
        self.process = QtCore.QProcess()
        self.process.readyReadStandardError.connect(self.onReadyReadStandardError)
        self.process.readyReadStandardOutput.connect(self.onReadyReadStandardOutput)

        self.connect_function()
        self.start()




    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "easyPDFcopy"))
        self.pushButton.setText(_translate("MainWindow", "启动"))
        self.pushButton_5.setText(_translate("MainWindow", "停止"))
        self.pushButton_3.setText(_translate("MainWindow", "退出"))
    

    # def start(self):
    #     if self.P is None:
    #         self.P = subprocess.Popen(['python','core_win.py'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    #         print('Started, PID=',self.P.pid,'\n\n')
    #     else:
    #         print('One process has been started, PID=',self.P.pid,'\n\n')
    def info_system(self, text):
        self.fmt.setForeground(QtGui.QColor(255,0,0))
        self.plainTextEdit.mergeCurrentCharFormat(self.fmt)
        self.plainTextEdit.appendPlainText('\n\n' + text + '\n\n')
    
    def start(self):
        if 0 == self.process.processId():
            # set here while pyinstaller.
            # self.process.start('python ./core_win_for_gui.py')
            self.process.start('core_win_for_gui.exe')
            text = 'Started, PID=' + str(self.process.processId())
            self.info_system(text)
        else:
            text = 'One process has been started, PID=' + str(self.process.processId())
            self.info_system(text)
    
    def stop(self):
        if 0 != self.process.processId():
            tmp = self.process.processId()
            self.process.terminate()
            self.process.kill()
            text = 'Killed PID=' + str(tmp)
            self.info_system(text)
        else:
            text = 'No process is running.'
            self.info_system(text)
    

    def onReadyReadStandardError(self):
        self.fmt.setForeground(QtGui.QColor(255,0,0))
        self.plainTextEdit.mergeCurrentCharFormat(self.fmt)
        # error = self.process.readAllStandardError().data().decode()
        error = self.process.readAllStandardError().data().decode("utf-8", 'ignore')
        self.plainTextEdit.appendPlainText(error)
        #self.errorSignal.emit(error)

    def onReadyReadStandardOutput(self):
        # result = self.process.readAllStandardOutput().data().decode()
        result = self.process.readAllStandardOutput().data().decode("utf-8", 'ignore')

        label, result = result[:15], result[15:]
        if 'EASYPDFCOPY(E):' == label:
            self.fmt.setForeground(QtGui.QColor(255,0,0))
            self.plainTextEdit.mergeCurrentCharFormat(self.fmt)
            self.plainTextEdit.appendPlainText(result)
        elif 'EASYPDFCOPY(*):'== label:
            old_str, new_str = result.split('EASYPDFCOPY(*):')
            self.fmt.setForeground(QtGui.QColor(255,153,18))
            self.plainTextEdit.mergeCurrentCharFormat(self.fmt)
            self.plainTextEdit.appendPlainText(old_str)
            self.fmt.setForeground(QtGui.QColor(34,139,34))
            self.plainTextEdit.mergeCurrentCharFormat(self.fmt)
            self.plainTextEdit.appendPlainText(new_str)
        else:
            self.fmt.setForeground(QtGui.QColor(0,0,0))
            self.plainTextEdit.mergeCurrentCharFormat(self.fmt)
            self.plainTextEdit.appendPlainText(result)
        
        self.fmt.setForeground(QtGui.QColor(0,0,0))
        self.plainTextEdit.mergeCurrentCharFormat(self.fmt)
        self.plainTextEdit.appendPlainText(self.split_str)

        #self.outputSignal.emit(result)


    def connect_function(self):
        self.pushButton_3.clicked.connect(QCoreApplication.quit)
        self.pushButton.clicked.connect(self.start)
        self.pushButton_5.clicked.connect(self.stop)




class easyWindow(QtWidgets.QMainWindow):
    def changeEvent(self, event):
        if event.type() == QtCore.QEvent.WindowStateChange:
            if self.windowState() & QtCore.Qt.WindowMinimized:
                event.ignore()
                self.hide()
                return
        super(easyWindow, self).changeEvent(event)




class TrayIcon(QtWidgets.QSystemTrayIcon):
    def __init__(self,MainWindow,parent=None):
        super(TrayIcon, self).__init__(parent)
        self.ui = MainWindow
        self.createMenu()

        self.ui.showNormal()
        self.ui.activateWindow()
        self.ui.setWindowFlags(QtCore.Qt.Window)
        self.ui.show()
    
    
    def createMenu(self):
        self.menu = QtWidgets.QMenu()
        self.showAction1 = QtWidgets.QAction("显示", self, triggered=self.show_window)
        # self.Action2 = QtWidgets.QAction("启动")
        # self.Action3 = QtWidgets.QAction("停止")
        self.quitAction = QtWidgets.QAction("退出", self, triggered=self.quit)
 
        self.menu.addAction(self.showAction1)
        # self.menu.addAction(self.Action2)
        # self.menu.addAction(self.Action3)
        self.menu.addAction(self.quitAction)
        self.setContextMenu(self.menu)

        #self.Action2.triggered.connect(self.showMsg)
        #self.Action3.triggered.connect(self.ui.stop)


 
        self.setIcon(QtGui.QIcon("./easypdfcopy.png"))
        self.icon = self.MessageIcon()
 
        #把鼠标点击图标的信号和槽连接
        self.activated.connect(self.onIconClicked)
 
 
    def show_window(self):
        #若是最小化，则先正常显示窗口，再变为活动窗口（暂时显示在最前面）
        self.ui.showNormal()
        self.ui.activateWindow()
        self.ui.setWindowFlags(QtCore.Qt.Window)
        self.ui.show()
        
    def quit(self):
        QtWidgets.qApp.quit()
 
    #鼠标点击icon传递的信号会带有一个整形的值，1是表示单击右键，2是双击，3是单击左键，4是用鼠标中键点击
    def onIconClicked(self, reason):
        #if reason == 2 or reason == 3:
        if reason == 2:
            if self.ui.isMinimized() or not self.ui.isVisible():
                #若是最小化，则先正常显示窗口，再变为活动窗口（暂时显示在最前面）
                self.ui.showNormal()
                self.ui.activateWindow()
                self.ui.setWindowFlags(Qt.Window)
                self.ui.show()
            else:
                #若不是最小化，则最小化
                self.ui.showMinimized()
                self.ui.setWindowFlags(QtCore.Qt.SplashScreen)
                self.ui.show()




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    # MainWindow = QtWidgets.QMainWindow()
    MainWindow = easyWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    #MainWindow.show()

    ti = TrayIcon(MainWindow)
    ti.show()

    sys.exit(app.exec_())
